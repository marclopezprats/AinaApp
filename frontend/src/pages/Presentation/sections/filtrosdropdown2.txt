import React, { useState, useEffect } from 'react';
import axios from 'axios';

const SelectorDinamico = () => {
  const [modelos, setModelos] = useState([]);
  const [versiones, setVersiones] = useState([]);
  const [colores, setColores] = useState([]);
  const [modeloSeleccionado, setModeloSeleccionado] = useState('');
  const [versionSeleccionada, setVersionSeleccionada] = useState('');
  const [ColorSeleccionado, setColorSeleccionado] = useState('');

  useEffect(() => {
    obtenerModelos();
  }, []);

  const obtenerModelos = () => {
    axios.get('/api/modelos')
      .then(response => {
        setModelos(response.data);
      })
      .catch(error => {
        console.error('Error al obtener modelos:', error);
      });
  };

  const obtenerVersiones = (modeloId) => {
    axios.get(`/api/versiones?modeloId=${modeloId}`)
      .then(response => {
        setVersiones(response.data);
      })
      .catch(error => {
        console.error('Error al obtener versiones:', error);
      });
  };

  const obtenerColores = (versionId) => {
    axios.get(`/api/colores?versionId=${versionId}`)
      .then(response => {
        setColores(response.data);
      })
      .catch(error => {
        console.error('Error al obtener colores:', error);
      });
  };

  const handleModeloChange = (modeloId) => {
    const modelo = modelos.find(modelo => modelo.id === modeloId);
    setModeloSeleccionado(modeloId);
    console.log(modelo.nombre);
    setVersiones([]); // Limpiar versiones al cambiar de modelo
    setColores([]); // Limpiar colores al cambiar de modelo
    obtenerVersiones(modeloId);
  };
  
  const handleVersionChange = (versionId) => {
    const version = versiones.find(version => version.id === versionId);
    setVersionSeleccionada(versionId);
    console.log(version.nombre);
    setColores([]); // Limpiar colores al cambiar de versiÃ³n
    obtenerColores(versionId);
  };
  
  const handleColorChange = (colorId) => {
    const color = colores.find(color => color.id === colorId);
    setColorSeleccionado(colorId);
    console.log(color.nombre);
  };

  const handleSearch = () => {}

  return (
    <div>
        {modelos.map(modelo => (
          <button key={modelo.id} onClick={() => handleModeloChange(modelo.id)}>{modelo.nombre}</button>
        ))}

        {versiones.map(version => (
          <button key={version.id} onClick={() => handleVersionChange(version.id)}>{version.nombre}</button>
        ))}

        {colores.map(color => (
          <button key={color.id} onClick={() => handleColorChange(color.id)}>{color.nombre}</button>
        ))}
    </div>
  );
};

export default SelectorDinamico;
